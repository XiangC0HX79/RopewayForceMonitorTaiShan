<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 left="0" right="0" top="0" bottom="0" creationComplete="creationCompleteHandler(event)">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:SolidColorStroke id="lineStroke" color="red" weight="2"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import app.model.vo.RopewayVO;
			
			import mx.collections.ArrayCollection;
			import mx.effects.AnimateProperty;
			import mx.effects.Parallel;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import spark.formatters.DateTimeFormatter;
			import spark.primitives.Line;
			
			import flash.filters.BitmapFilterQuality;
			
			public static const TEM_MIN:Number = 60 * 1000;
			
			[Bindable]public var ropeway:RopewayVO;
			[Bindable]public var numtimes:int;
			[Bindable]public var date:String;
			
			private var _arrLine:Array = new Array;
			private var _arrAnima:Array = new Array;
						
			//[Bindable]private var verticalAxis:ArrayCollection = new ArrayCollection;
			//[Bindable]private var horizontalAxis:ArrayCollection = new ArrayCollection;
						
			public function UpdateChart():void
			{				
				var max:int;
				var min:int;
				var ave:int;
				
				var df:Number = ropeway.yesterdayMax - ropeway.yesterdayMin;
				if(df < 3 * 10)
				{
					ave = Math.floor(ropeway.yesterdayAve / 10) * 10 + 5;
					min = ave - 25;
					max = ave + 25;
				}
				else if(df < 3 * 20)
				{
					ave = Math.floor(ropeway.yesterdayAve / 20) * 20 + 10;
					min = ave - 50;
					max = ave + 50;
				}
				else if(df < 3 * 50)
				{
					ave = Math.floor(ropeway.yesterdayAve / 50) * 50 + 25;
					min = ave - 125;
					max = ave + 125;
				}
				
				verticalAxis.minimum = min;
				verticalAxis.maximum = max;
				verticalAxis.interval = 50;
								
				var maxh:Number = (ropeway.ropewayHistory[ropeway.ropewayHistory.length - 1] as RopewayVO).ropewayTime.time;
				var minh:Number = (ropeway.ropewayHistory[0] as RopewayVO).ropewayTime.time;
				
				minh = Math.floor( minh / TEM_MIN) * TEM_MIN;
				maxh = Math.ceil( maxh / TEM_MIN) * TEM_MIN;
				
				horizontalAxis.maximum = new Date(maxh);
				horizontalAxis.minimum = new Date(minh);
				
				//horizontalAxis.interval = 2;
				horizontalAxis.labelUnits = "minutes";
				
				//horizontalAxis.interval = Math.ceil((maxh - minh) / (5 * TEM_MIN)) * TEM_MIN;
				
				/* verticalAxis.removeAll();
				df = (max - min) / 5;
				for(var i:Number = 5;i >=0;i--)
					verticalAxis.addItem(String(i * df + min));
				
				horizontalAxis.removeAll();
				var dt:DateTimeFormatter = new DateTimeFormatter;
				dt.dateTimePattern = "HH:MM:ss";
				for(i = 0;i<5;i++)
					horizontalAxis.addItem(dt.format(new Date)); */
				
				var i:Number;
				for(i = 0;i<_arrLine.length;i++)
				{
					var line:Line = _arrLine[i];
					
					var anima:AnimateProperty = _arrAnima[i * 4];
					anima.fromValue = line.xFrom;
					anima = _arrAnima[i * 4 + 1];
					anima.fromValue = line.yFrom;
					anima = _arrAnima[i * 4 + 2];
					anima.fromValue = line.xTo;
					anima = _arrAnima[i * 4 + 3];
					anima.fromValue = line.yTo;
				}
				
				var perw:Number = groupChart.width / ropeway.ropewayHistory.length;
				var perh:Number = groupChart.height / (max - min);
								
				for(i = 1;i<ropeway.ropewayHistory.length;i++)
				{
					if(_arrLine.length < i)
					{
						line = new Line;
						line.stroke = lineStroke;					
						_arrLine.push(line);					
						groupChart.addElement(line);
						
						anima = new AnimateProperty(line);
						anima.property = "xFrom";
						_arrAnima.push(anima);
						
						anima = new AnimateProperty(line);
						anima.property = "yFrom";
						_arrAnima.push(anima);
						
						anima = new AnimateProperty(line);
						anima.property = "xTo";
						_arrAnima.push(anima);
						
						anima = new AnimateProperty(line);
						anima.property = "yTo";
						_arrAnima.push(anima);
					}
					
					var r:RopewayVO = ropeway.ropewayHistory[i - 1];
					var x:Number = int(perw * (i - 1));
					var y:Number = int(perh * (max - r.ropewayForce));
					//line = _arrLine[i];
					
					anima = _arrAnima[(i - 1) * 4];
					anima.toValue = x;
					anima = _arrAnima[(i - 1) * 4 + 1];
					anima.toValue = y;
					
					
					r = ropeway.ropewayHistory[i];
					x = int(perw * i);
					y = int(perh * (max - r.ropewayForce));
					
					anima = _arrAnima[(i - 1) * 4 + 2];
					anima.toValue = x;
					anima = _arrAnima[(i - 1) * 4 + 3];
					anima.toValue = y;
				}
				
				var p:Parallel = new Parallel;
				p.duration = 1000;
				p.children = _arrAnima;
				p.play();
				
				trace("Chart:" + (new Date).time);
			}		
						
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				UpdateChart();
			}
			
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="100%">
		<s:HGroup>
			<s:Group width="300" height="200">
				<s:Image source="assets/image/kuang2.png" width="100%" height="100%"/>
				<s:Label left="41" top="17" text="抱索器编号：{ropeway.ropewayId}" fontWeight="bold"/>
				<s:Label right="24" top="17" text="开合次数：{numtimes}" fontWeight="bold"/>
				<s:Label horizontalCenter="54" top="86" text="{ropeway.ropewayForce} {ropeway.ropewayUnit}" fontSize="38" fontWeight="bold"/>
				<s:Label top="148" horizontalCenter="54" text="{date}"/>
			</s:Group>
			<s:Group width="300" height="200">
				<s:Image source="assets/image/kuang3.png" width="100%" height="100%"/>
				<s:Label left="48" top="17" text="当前温度" fontWeight="bold"/>
				<s:Label horizontalCenter="52" top="86" text="{ropeway.ropewayTemp} ℃" fontSize="38" fontWeight="bold"/>
				<s:Label top="148" horizontalCenter="54" text="{date}"/>
			</s:Group>
			<s:Group width="300" height="200">
				<s:Image source="assets/image/kuang4.png" width="100%" height="100%"/>
				<s:Label left="48" top="17" text="报警情况" fontWeight="bold"/>
				<s:Scroller x="18" y="53">
					<s:DataGroup id="datagroup" width="246" top="45" height="136" itemRenderer="custom.itemRenderer.ItemRendererRealtimeDetection">
						<s:layout>
							<s:TileLayout columnAlign="justifyUsingWidth" 
										  paddingTop="2" paddingBottom="2"/>
						</s:layout>	
					</s:DataGroup>
				</s:Scroller>
			</s:Group>
		</s:HGroup>
		
		<s:Group width="100%" height="100%">
			<mx:LineChart left="20" right="20" bottom="20" top="20" dataProvider="{ropeway.ropewayHistory}">
				<mx:verticalAxis>
					<mx:LinearAxis id="verticalAxis"/>
				</mx:verticalAxis>
				<mx:horizontalAxis>
					<mx:DateTimeAxis displayLocalTime="true" id="horizontalAxis"/>
				</mx:horizontalAxis>
				<mx:series>
					<mx:LineSeries id="ser" yField="ropewayForce" xField="ropewayTime">
						<mx:lineStroke>
							<s:SolidColorStroke color="red"/>
						</mx:lineStroke>
					</mx:LineSeries>
				</mx:series>
			</mx:LineChart>			
			<!--<s:DataGroup mouseChildren="false" mouseEnabled="false"
						 left="0" right="100" top="20" bottom="20" 
						 dataProvider="{verticalAxis}">
				<s:layout>
					<s:VerticalLayout/>
				</s:layout>
				<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer height="100%">
							<s:Label text="{data}"/>
						</s:ItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:DataGroup>
			
			<s:DataGroup mouseChildren="false" mouseEnabled="false"
						 left="120" right="20" bottom="0" height="20"
						 dataProvider="{horizontalAxis}">
				<s:layout>
					<s:HorizontalLayout/>
				</s:layout>
				<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer width="100%">
							<s:Label text="{data}"/>
						</s:ItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:DataGroup>
			
			<s:SpriteVisualElement id="chartBack" left="100" right="20" bottom="20" top="20"/>-->
			
			<s:Group id="groupChart" left="20" right="20" bottom="20" top="20">
				<s:filters>
					<s:DropShadowFilter 
						distance="4" 
						angle="45" 
						color="0" 
						alpha="1" 
						blurX="4" 
						blurY="4" 
						strength="1" 
						quality="1" 
						hideObject="false"
						inner="false" 
						knockout="false"/>
				</s:filters>
			</s:Group>
		</s:Group>
		<!--<s:Group width="900" height="100%">
			<mx:LineChart id="linechart1" width="100%" height="100%" updateComplete="linechart1_updateCompleteHandler(event)">
				<mx:verticalAxis>
					<mx:LinearAxis maximum="{ropeway.todayMax + 50}" minimum="{ropeway.todayMin - 50}" interval="1"/>
				</mx:verticalAxis>
				<mx:series>
					<mx:LineSeries yField="ropewayForce"/>
				</mx:series>
			</mx:LineChart>			
		</s:Group>-->
	</s:VGroup>
</s:Group>
