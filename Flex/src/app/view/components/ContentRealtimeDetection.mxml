<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 left="0" right="0" top="0" bottom="0" creationComplete="creationCompleteHandler(event)">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:SolidColorStroke id="lineStroke" color="0xE48701" weight="3"/>
		<s:SolidColorStroke id="tickStroke" color="black" weight="2"/>
		<s:SolidColorStroke id="gridStroke" color="gray" alpha="0.3" weight="2"/>
		<s:SolidColorStroke id="yesStroke" color="red" weight="2"/>
		<s:Parallel id="parallel" duration="1000"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import app.model.vo.RopewayVO;
			
			import custom.components.ChartImage;
			
			import flash.filters.BitmapFilterQuality;
			
			import mx.collections.ArrayCollection;
			import mx.effects.AnimateProperty;
			import mx.effects.Parallel;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.graphics.IStroke;
			
			import spark.formatters.DateTimeFormatter;
			import spark.primitives.Line;
			import spark.primitives.Rect;
			
			public static const ONE_MIN:Number = 60 * 1000;
			public static const TEM_MIN:Number = 10 * 60 * 1000;
			
			[Bindable]public var ropeway:RopewayVO;
			[Bindable]public var numtimes:int;
			[Bindable]public var date:String;
						
			private var _arrLine:Array = new Array;
			private var _arrAnima:Array = new Array;
			private var _arrImage:Array = new Array;
						
			//[Bindable]private var verticalAxis:ArrayCollection = new ArrayCollection;
			//[Bindable]private var horizontalAxis:ArrayCollection = new ArrayCollection;
						
			public function UpdateChart():void
			{								
				var df:Number = ropeway.yesterdayMax - ropeway.yesterdayMin;
				var ave:Number = (ropeway.yesterdayMax + ropeway.yesterdayMin) / 2;
				if(df < 4 * 10)
				{
					verticalAxis.interval = 10;
					verticalAxis.minimum = Math.floor(ave / verticalAxis.interval) * verticalAxis.interval - 2 * verticalAxis.interval;
					verticalAxis.maximum = verticalAxis.minimum + 5 * verticalAxis.interval;
				}
				else if(df < 4 * 20)
				{
					verticalAxis.interval = 20;
					verticalAxis.minimum = Math.floor(ave / verticalAxis.interval) * verticalAxis.interval - 2 * verticalAxis.interval;
					verticalAxis.maximum = verticalAxis.minimum + 5 * verticalAxis.interval;
				}
				else if(df < 4 * 50)
				{
					verticalAxis.interval = 50;
					verticalAxis.minimum = Math.floor(ave / verticalAxis.interval) * verticalAxis.interval - 2 * verticalAxis.interval;
					verticalAxis.maximum = verticalAxis.minimum + 5 * verticalAxis.interval;
				}
								
				var maxh:Number = (ropeway.ropewayHistory[ropeway.ropewayHistory.length - 1] as RopewayVO).ropewayTime.time;
				var minh:Number = (ropeway.ropewayHistory[0] as RopewayVO).ropewayTime.time;
				
				minh = Math.floor(minh / ONE_MIN) * ONE_MIN;
				maxh = Math.round(maxh / ONE_MIN) * ONE_MIN + ONE_MIN;
				
				//var interval:Number = Math.ceil((maxh - minh) / TEM_MIN);
				//horizontalAxis.interval = interval;
				
				horizontalAxis.minimum = new Date(minh);
				horizontalAxis.maximum = new Date(maxh);
										
				if(_arrLine.length == 0)
				{
					var ptS:Point = dataCanvas.dataToLocal(horizontalAxis.minimum,ropeway.yesterdayMin);
					ptS.x = 10;
					
					var ptE:Point = dataCanvas.dataToLocal(horizontalAxis.maximum,ropeway.yesterdayMin);
					ptE.x = 770;
					
					addLine(ptS,ptE,yesStroke);
					
					ptS = dataCanvas.dataToLocal(horizontalAxis.minimum,ropeway.yesterdayMax);
					ptS.x = 10;
					
					ptE = dataCanvas.dataToLocal(horizontalAxis.maximum,ropeway.yesterdayMax);
					ptE.x = 770;
					
					addLine(ptS,ptE,yesStroke);
										
					ptS = dataCanvas.dataToLocal(horizontalAxis.minimum,ropeway.yesterdayAve);
					ptS.x = 10;
					
					ptE = dataCanvas.dataToLocal(horizontalAxis.maximum,ropeway.yesterdayAve);
					ptE.x = 770;
					
					addLine(ptS,ptE,yesStroke);
				}
								
				var i:Number;
				var n:Number = ropeway.ropewayHistory.length - (_arrLine.length - 3); 
				if(n > 1)
				{
					for(i = ropeway.ropewayHistory.length - n;i<ropeway.ropewayHistory.length - 1;i++)
					{						
						addLine(
							dataCanvas.dataToLocal(
								ropeway.ropewayHistory[i].ropewayTime
								,ropeway.ropewayHistory[i].ropewayForce
							)
							,
							dataCanvas.dataToLocal(
								ropeway.ropewayHistory[i+1].ropewayTime
								,ropeway.ropewayHistory[i+1].ropewayForce
							)
							,lineStroke
						);
					}
				}
				else if(n < 1)
				{					
					for(i = 0;i < 1 - n;i++)
					{					
						_arrAnima.pop();
						_arrAnima.pop();
						_arrAnima.pop();
						_arrAnima.pop();
						
						line = _arrLine.pop();
						groupChart.removeElement(line);						
					}
				}
				
				for(i = 0;i<_arrLine.length;i++)
				{
					var line:Line = _arrLine[i];
					
					var anima:AnimateProperty = _arrAnima[i * 4];
					anima.fromValue = line.xFrom;
					anima = _arrAnima[i * 4 + 1];
					anima.fromValue = line.yFrom;
					anima = _arrAnima[i * 4 + 2];
					anima.fromValue = line.xTo;
					anima = _arrAnima[i * 4 + 3];
					anima.fromValue = line.yTo;
					
					if(i == 0)
					{
						ptS = dataCanvas.dataToLocal(horizontalAxis.minimum,ropeway.yesterdayMin);
						ptE = dataCanvas.dataToLocal(horizontalAxis.maximum,ropeway.yesterdayMin);
					}
					else if(i == 1)
					{
						ptS = dataCanvas.dataToLocal(horizontalAxis.minimum,ropeway.yesterdayMax);
						ptE = dataCanvas.dataToLocal(horizontalAxis.maximum,ropeway.yesterdayMax);
					}
					else if(i == 2)
					{
						ptS = dataCanvas.dataToLocal(horizontalAxis.minimum,ropeway.yesterdayAve);
						ptE = dataCanvas.dataToLocal(horizontalAxis.maximum,ropeway.yesterdayAve);
					}
					else
					{
						ptS = dataCanvas.dataToLocal(
							ropeway.ropewayHistory[i-3].ropewayTime
							,ropeway.ropewayHistory[i-3].ropewayForce
						);						
						ptE = dataCanvas.dataToLocal(
							ropeway.ropewayHistory[i-2].ropewayTime
							,ropeway.ropewayHistory[i-2].ropewayForce
						);
					}
					
					setToValue(ptS,ptE,i);
				}
				
				parallel.children = _arrAnima;
				parallel.play();
				
				
				//添加点
				n =  ropeway.ropewayHistory.length - _arrImage.length; 
				
				if(n > 0)
				{
					for(i = ropeway.ropewayHistory.length - n;i<ropeway.ropewayHistory.length;i++)
					{			
						var pt:Point = dataCanvas.dataToLocal(
							ropeway.ropewayHistory[i].ropewayTime
							,ropeway.ropewayHistory[i].ropewayForce
						);
						
						var img:ChartImage = new ChartImage;
						img.x = pt.x - 5;
						img.y = pt.y - 5;
						
						groupChart.addElement(img);
						_arrImage.push(img);
					}
				}
				else if(n < 0)
				{					
					for(i = 0;i < -n;i++)
					{					
						groupChart.removeElement(_arrImage.pop());						
					}
				}
				
				for(i = 0;i<ropeway.ropewayHistory.length;i++)
				{						
					pt = dataCanvas.dataToLocal(
						ropeway.ropewayHistory[i].ropewayTime
						,ropeway.ropewayHistory[i].ropewayForce
					);
					
					img = _arrImage[i];
					img.move(pt.x - 5,pt.y - 5);
				}
			}		
						
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				UpdateChart();
			}
			
			private function addLine(ptS:Point,ptE:Point,lineStroke:IStroke):void
			{								
				var line:Line = new Line;
				line.stroke = lineStroke;			
									
				line.xFrom = ptS.x;
				line.yFrom = ptS.y;
				
				line.xTo = ptE.x;
				line.yTo = ptE.y;
				
				_arrLine.push(line);		
				groupChart.addElement(line);
				
				var anima:AnimateProperty = new AnimateProperty(line);
				anima.property = "xFrom";
				_arrAnima.push(anima);
				
				anima = new AnimateProperty(line);
				anima.property = "yFrom";
				_arrAnima.push(anima);
				
				anima = new AnimateProperty(line);
				anima.property = "xTo";
				_arrAnima.push(anima);
				
				anima = new AnimateProperty(line);
				anima.property = "yTo";
				_arrAnima.push(anima);
			}
			
			private function setToValue(ptS:Point,ptE:Point,i:Number):void
			{				
				var anima:AnimateProperty = _arrAnima[i * 4];
				if(i > 2)
					anima.toValue = ptS.x;
				anima = _arrAnima[i * 4 + 1];
				anima.toValue = ptS.y;												
				anima = _arrAnima[i * 4 + 2];
				if(i > 2)
					anima.toValue = ptE.x;
				anima = _arrAnima[i * 4 + 3];
				anima.toValue = ptE.y;
			}
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="100%">
		<s:HGroup>
			<s:Group width="300" height="200">
				<s:Image source="assets/image/kuang2.png" width="100%" height="100%"/>
				<s:Label left="41" top="17" text="抱索器编号：{ropeway.ropewayId}" fontWeight="bold"/>
				<s:Label right="24" top="17" text="开合次数：{numtimes}" fontWeight="bold"/>
				<s:Label horizontalCenter="54" top="86" text="{ropeway.ropewayForce} {ropeway.ropewayUnit}" fontSize="38" fontWeight="bold"/>
				<s:Label top="148" horizontalCenter="54" text="{date}"/>
			</s:Group>
			<s:Group width="300" height="200">
				<s:Image source="assets/image/kuang3.png" width="100%" height="100%"/>
				<s:Label left="48" top="17" text="当前温度" fontWeight="bold"/>
				<s:Label horizontalCenter="52" top="86" text="{ropeway.ropewayTemp} ℃" fontSize="38" fontWeight="bold"/>
				<s:Label top="148" horizontalCenter="54" text="{date}"/>
			</s:Group>
			<s:Group width="300" height="200">
				<s:Image source="assets/image/kuang4.png" width="100%" height="100%"/>
				<s:Label left="48" top="17" text="报警情况" fontWeight="bold"/>
				<s:Scroller x="18" y="53">
					<s:DataGroup id="datagroup" width="246" top="45" height="136" itemRenderer="custom.itemRenderer.ItemRendererRealtimeDetection">
						<s:layout>
							<s:TileLayout columnAlign="justifyUsingWidth" 
										  paddingTop="2" paddingBottom="2"/>
						</s:layout>	
					</s:DataGroup>
				</s:Scroller>
			</s:Group>
		</s:HGroup>
		
		<s:Group width="100%" height="100%">
			<mx:LineChart left="20" right="40" bottom="20" top="40">
				<mx:backgroundElements>
					<fx:Array>						
						<mx:GridLines gridDirection="both" 
									  horizontalStroke="{gridStroke}"
									  verticalStroke="{gridStroke}"/>
					</fx:Array>
				</mx:backgroundElements>
				
				<mx:annotationElements>
					<mx:CartesianDataCanvas id="dataCanvas" includeInRanges="true"/>
				</mx:annotationElements>
				
				<mx:verticalAxis>
					<mx:LinearAxis id="verticalAxis"/>
				</mx:verticalAxis>
				<mx:horizontalAxis>
					<mx:DateTimeAxis labelUnits="minutes"
									 displayLocalTime="true" 
									 id="horizontalAxis"/>
				</mx:horizontalAxis>
				
				<mx:verticalAxisRenderers>					
					<mx:AxisRenderer axis="{verticalAxis}" 
									 axisStroke="{tickStroke}" tickStroke="{tickStroke}" 
									 minorTickPlacement="none"/>
				</mx:verticalAxisRenderers>
				
				<mx:horizontalAxisRenderers>			
					<mx:AxisRenderer axis="{horizontalAxis}" 
									 axisStroke="{tickStroke}" tickStroke="{tickStroke}" 
									 minorTickPlacement="none"/>					
				</mx:horizontalAxisRenderers>
				
				<mx:series>
					<mx:LineSeries id="ser" yField="ropewayForce" xField="ropewayTime"/>
				</mx:series>
			</mx:LineChart>		
			
			<s:Group id="groupChart" left="80" right="70" bottom="45" top="50">
				<s:filters>
					<s:DropShadowFilter 
						distance="4" 
						angle="45" 
						color="0" 
						alpha="1" 
						blurX="4" 
						blurY="4" 
						strength="1" 
						quality="1" 
						hideObject="false"
						inner="false" 
						knockout="false"/>
				</s:filters>
			</s:Group>
			
			<s:Label left="10" top="20" text="抱索力（{ropeway.ropewayUnit}）"/>
			<s:Label right="15" bottom="40" text="时间"/>
			<s:Label y="10" fontSize="24" fontWeight="bold" horizontalCenter="0"
					 text="{ropeway.ropewayId}抱索力实时监控曲线"/>
		</s:Group>
		<!--<s:Group width="900" height="100%">
			<mx:LineChart id="linechart1" width="100%" height="100%" updateComplete="linechart1_updateCompleteHandler(event)">
				<mx:verticalAxis>
					<mx:LinearAxis maximum="{ropeway.todayMax + 50}" minimum="{ropeway.todayMin - 50}" interval="1"/>
				</mx:verticalAxis>
				<mx:series>
					<mx:LineSeries yField="ropewayForce"/>
				</mx:series>
			</mx:LineChart>			
		</s:Group>-->
	</s:VGroup>
</s:Group>
