<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:components="app.view.components.*"
		 width="100%" height="100%" 
		 resize="dataCanvas_resizeHandler(event)" 
		 creationComplete="container_creationCompleteHandler(event)" fontSize="12">	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:SolidColorStroke id="tickStroke" color="0xC2C2C2" weight="2"/>
		<s:SolidColorStroke id="gridStroke" color="gray" alpha="0.3" weight="1"/>
		<s:Sequence id="sequence"/>
		<s:Parallel id="parallel"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import app.model.vo.RopewayForceVO;
			import app.model.vo.RopewayVO;
			
			import flash.utils.setTimeout;
			
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.graphics.ImageSnapshot;
			
			import spark.effects.Animate;
			import spark.effects.Fade;
			import spark.effects.Move;
			import spark.effects.Scale;
			import spark.effects.Wipe;
			import spark.effects.WipeDirection;
			import spark.effects.animation.MotionPath;
			import spark.effects.animation.SimpleMotionPath;
			import spark.primitives.Line;
			
			public static const ONE_MIN:Number = 60 * 1000;
			public static const TEN_MIN:Number = 10 * 60 * 1000;
			public static const HALF_HOUR:Number = 30 * 60 * 1000;
			public static const ONE_HOUR:Number = 60 * 60 * 1000;
									
			[Bindable]private var _ropeway:RopewayVO; 
			public function get ropeway():RopewayVO
			{
				return this._ropeway;
			}
			public function set ropeway(value:RopewayVO):void
			{
				if(value && (value.ropewayOpenCount > 0))
				{
					if(
						(this.initialized)
						&& 
						(value.firstRopewayForce)
						)
					{
						reCalcuXY(value);
						
						if(value == _ropeway)
							continueChart(value);
						else
							refreshChart(value);
					}
				}
				else
				{					
					groupPoint.removeAllElements();
					groupLine.removeAllElements();
					
					lineMax.visible = false;
					lineMin.visible = false;
					lineAve.visible = false;
					lbMax.visible = false;
					lbMin.visible = false;
					lbAve.visible = false;
				}
				
				_ropeway = value;
			}
						
			private function reCalcuXY(rw:RopewayVO):void
			{				
				//重新计算图表XY轴取值范围与刻度
				if(rw.yesterdayMax && rw.yesterdayMin)
				{
					var df:Number = rw.yesterdayMax - rw.yesterdayMin;
					var ave:Number = (rw.yesterdayMax + rw.yesterdayMin) / 2;
				}
				else
				{
					df = rw.todayMax - rw.todayMin;
					ave = (rw.todayMax + rw.todayMin) / 2;
				}
				
				if(df < 4 * 10)
				{
					verticalAxis.interval = 10;
				}
				else if(df < 4 * 20)
				{
					verticalAxis.interval = 20;
				}
				else if(df < 4 * 50)
				{
					verticalAxis.interval = 50;
				}
				else if(df < 4 * 100)
				{
					verticalAxis.interval = 100;
				}
				else
				{
					var maxh:Number = rw.yesterdayMin?(rw.yesterdayMin - 50):rw.todayMin;
					var minh:Number = rw.yesterdayMax?(rw.yesterdayMax + 50):rw.todayMax;
					
					minh = Math.floor(minh / 200) * 200;
					maxh = Math.ceil(maxh / 200) * 200;
					
					verticalAxis.interval = (maxh - minh) / 5;
				}
				
				minh = Math.floor(ave / verticalAxis.interval) * verticalAxis.interval - 2 * verticalAxis.interval;
				verticalAxis.minimum = (minh > 0)?minh:0;
				verticalAxis.maximum = verticalAxis.minimum + 5 * verticalAxis.interval;
				
				minh = rw.firstRopewayForce.ropewayTime.time;	
				minh = Math.floor(minh / ONE_MIN) * ONE_MIN;
				
				maxh = rw.lastRopewayForce.ropewayTime.time;	
				maxh = Math.floor(maxh / ONE_MIN) * ONE_MIN + ONE_MIN;		
				
				df = maxh - minh;
				
				if(df <= TEN_MIN)
				{					
					horizontalAxis.labelUnits = "minutes";
					horizontalAxis.interval = 1;
					
					maxh = minh + TEN_MIN + Math.round(4 / groupChart.width * TEN_MIN);
				}
				else if(df <= 10 * TEN_MIN)
				{
					var intervar:Number = Math.ceil(df / TEN_MIN);
					
					horizontalAxis.labelUnits = "minutes";
					horizontalAxis.interval = intervar;
					
					maxh = minh + intervar * TEN_MIN + Math.round(4 / groupChart.width * intervar * TEN_MIN);
					
				}
				else if(df <= 10 * TEN_MIN)
				{
					intervar = Math.ceil(df / TEN_MIN);
					
					horizontalAxis.labelUnits = "minutes";
					horizontalAxis.interval = intervar;
					
					maxh = minh + intervar * TEN_MIN + Math.round(4 / groupChart.width * intervar * TEN_MIN);					
				}
				else if(df <= 10 * HALF_HOUR)
				{
					intervar = Math.ceil(df / HALF_HOUR);
					
					horizontalAxis.labelUnits = "minutes";
					horizontalAxis.interval = 30;
					
					maxh = minh + intervar * HALF_HOUR + Math.round(4 / groupChart.width * intervar * HALF_HOUR);					
				}
				else
				{
					horizontalAxis.labelUnits = "hours";
					horizontalAxis.interval = 1;
					
					minh = Math.floor(minh / ONE_HOUR) * ONE_HOUR;
					maxh = Math.ceil(maxh / ONE_HOUR) * ONE_HOUR;
				}
				
				horizontalAxis.minimum = new Date(minh);
				horizontalAxis.maximum = new Date(maxh);
				
				if(rw.yesterdayMax && rw.yesterdayMin)
				{					
					//昨天数值
					lineMax.visible = true;
					lineMin.visible = true;
					lineAve.visible = true;
					lbMax.visible = true;
					lbMin.visible = true;
					lbAve.visible = true;
					
					var moves:Array = new Array;
					
					var pt:Point = dataCanvas.dataToLocal(0,rw.yesterdayMax);				
					var move:Move = new Move(lineMax);
					move.yTo = pt.y;
					moves.push(move);
					
					move = new Move(lbMax);
					move.yTo = pt.y + 20;
					moves.push(move);
					
					pt = dataCanvas.dataToLocal(0,rw.yesterdayAve);
					move = new Move(lineAve);
					move.yTo = pt.y;
					moves.push(move);
					
					move = new Move(lbAve);
					move.yTo = pt.y + 20;
					moves.push(move);
					
					pt = dataCanvas.dataToLocal(0,rw.yesterdayMin);
					move = new Move(lineMin);
					move.yTo = pt.y;
					moves.push(move);
					
					move = new Move(lbMin);
					move.yTo = pt.y + 20;
					moves.push(move);
					
					parallel.end();
					parallel.children = moves;
					parallel.play();
				}
				else
				{
					lineMax.visible = false;
					lineMin.visible = false;
					lineAve.visible = false;
					lbMax.visible = false;
					lbMin.visible = false;
					lbAve.visible = false;
				}
			}
			
			private function refreshChart(rw:RopewayVO):void
			{									
				//添加折线\点
				var len:int = groupPoint.numElements;
				for(var i:int = 0;i<len;i++)
				{
					var img:ChartImage = groupPoint.getElementAt(i) as ChartImage;
					img.removeEventListener(MouseEvent.MOUSE_OVER,onImageMouseOver);
					img.removeEventListener(MouseEvent.MOUSE_OUT,onImageMouseOut);
				}
				
				groupPoint.removeAllElements();
				groupLine.removeAllElements();
				
				var animates:Array = new Array;								
				for(i = 0;i<rw.ropewayHistory.length;i++)
				{
					img = new ChartImage;					
					img.addEventListener(MouseEvent.MOUSE_OVER,onImageMouseOver);		
					img.addEventListener(MouseEvent.MOUSE_OUT,onImageMouseOut);
					img.SetValue(dataCanvas,rw.ropewayHistory[i]);					
					groupPoint.addElement(img);		
					
					animates.push(img.scale);
					
					if(i < rw.ropewayHistory.length - 1)
					{						
					 	var line:ChartLine = new ChartLine;
						
						line.SetValue(dataCanvas,rw.ropewayHistory[i],rw.ropewayHistory[i+1]);
						
						groupLine.addElement(line);
						
						animates.push(line.animate);
					}
				}
				
				sequence.end();
				sequence.children = animates;
				sequence.duration = 3000 / animates.length;
				sequence.play();				
			}		
			
			private function continueChart(rw:RopewayVO):void
			{							
				var animates:Array = new Array;							
				for(var i:Number = 0;i<groupPoint.numElements;i++)
				{
					var img:ChartImage = groupPoint.getElementAt(i) as ChartImage;	
					img.SetValue(dataCanvas);
					animates.push(img.mv);
					
					if(i < groupLine.numElements)
					{
						var line:ChartLine = groupLine.getElementAt(i) as ChartLine;
						line.SetValue(dataCanvas);
						animates.push(line.animate);
					}
				}	
				
				var p:Parallel = new Parallel;
				p.children = animates;
				
				animates = new Array;
				animates.push(p);
				
				line = new ChartLine;
				line.SetValue(dataCanvas,_ropeway.ropewayHistory[_ropeway.ropewayHistory.length - 2],_ropeway.lastRopewayForce);
				groupLine.addElement(line);
				
				line.animate.duration = 500;
				animates.push(line.animate);
				
				img = new ChartImage;		
				img.addEventListener(MouseEvent.MOUSE_OVER,onImageMouseOver);		
				img.addEventListener(MouseEvent.MOUSE_OUT,onImageMouseOut);
				img.SetValue(dataCanvas,_ropeway.lastRopewayForce);
				groupPoint.addElement(img);		
				
				animates.push(img.scale);
				
				sequence.end();
				sequence.children = animates;
				sequence.duration = 3000 / animates.length;
				sequence.play();
			}
			
			private function moveChart(rw:RopewayVO):void
			{				
				var animates:Array = new Array;
				for(var i:Number = 0;i<groupPoint.numElements;i++)
				{
					var img:ChartImage = groupPoint.getElementAt(i) as ChartImage;						
					img.SetValue(dataCanvas);	
					animates.push(img.mv);
					
					if(i < groupLine.numElements)
					{
						var line:ChartLine = groupLine.getElementAt(i) as ChartLine;
						line.SetValue(dataCanvas);
						animates.push(line.animate);
					}
				}	
				
				sequence.end();
				
				var p:Parallel = new Parallel;
				p.children = animates;
				p.play();
			}
			
			private function onImageMouseOver(event:MouseEvent):void
			{
				var off:Number = 20;
				
				var img:ChartImage = event.currentTarget as ChartImage;				
				chartTip.ropewayForce = img.ropewayForce;
				
				var pt:Point = dataCanvas.dataToLocal(chartTip.ropewayForce.ropewayTime,chartTip.ropewayForce.ropewayForce);
				var prect:Rectangle = new Rectangle(0,0,groupLabel.width,groupLabel.height);
				var lbrect:Rectangle = new Rectangle(pt.x - off - chartTip.width,pt.y + off,chartTip.width,chartTip.height);
				var rbrect:Rectangle = new Rectangle(pt.x + off,pt.y + off,chartTip.width,chartTip.height);
				var ltrect:Rectangle = new Rectangle(pt.x - off - chartTip.width,pt.y - off - chartTip.height,chartTip.width,chartTip.height);
				var rtrect:Rectangle = new Rectangle(pt.x + off,pt.y - off - chartTip.height,chartTip.width,chartTip.height);
				
				if(prect.containsRect(lbrect))
				{
					chartTip.x = lbrect.x;
					chartTip.y = lbrect.y;
				}
				else if(prect.containsRect(rbrect))
				{
					chartTip.x = rbrect.x;
					chartTip.y = rbrect.y;
				}
				else if(prect.containsRect(ltrect))
				{
					chartTip.x = ltrect.x;
					chartTip.y = ltrect.y;
				}
				else
				{
					chartTip.x = rtrect.x;
					chartTip.y = rtrect.y;
				}
				
				chartTip.visible = true;
			}
			
			private function onImageMouseOut(event:MouseEvent):void
			{
				chartTip.visible = false;
			}
									
			protected function dataCanvas_resizeHandler(event:ResizeEvent):void
			{				
				flash.utils.setTimeout(chartResize,200);
			}
			
			private function chartResize():void
			{
				if(!_ropeway)
					return;
				
				reCalcuXY(_ropeway);
				
				moveChart(_ropeway);
			}
			
			protected function container_creationCompleteHandler(event:FlexEvent):void
			{
				if(!_ropeway)
					return;
				
				reCalcuXY(_ropeway);
				
				refreshChart(_ropeway);
			}				
		]]>
	</fx:Script>
	
	<s:Rect id="border" left="0" right="0" top="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke weight="1" color="#63c3d6"/>
		</s:stroke>
	</s:Rect>	
	
	<mx:LineChart id="lineChart" left="20" right="40" bottom="20" top="40">
		<mx:backgroundElements>
			<fx:Array>						
				<mx:GridLines gridDirection="both" 
							  horizontalStroke="{gridStroke}"
							  verticalStroke="{gridStroke}"/>
			</fx:Array>
		</mx:backgroundElements>
		
		<mx:annotationElements>
			<mx:CartesianDataCanvas id="dataCanvas"/>
		</mx:annotationElements>
		
		<mx:verticalAxis>
			<mx:LinearAxis id="verticalAxis"/>
		</mx:verticalAxis>
		<mx:horizontalAxis>
			<mx:DateTimeAxis displayLocalTime="true" 
							 alignLabelsToUnits="true"
							 id="horizontalAxis"/>
		</mx:horizontalAxis>
		
		<mx:verticalAxisRenderers>					
			<mx:AxisRenderer axis="{verticalAxis}" 
							 axisStroke="{tickStroke}" tickStroke="{tickStroke}" 
							 minorTickPlacement="none"/>
		</mx:verticalAxisRenderers>
		
		<mx:horizontalAxisRenderers>			
			<mx:AxisRenderer axis="{horizontalAxis}" 
							 axisStroke="{tickStroke}" tickStroke="{tickStroke}" 
							 minorTickPlacement="none"/>					
		</mx:horizontalAxisRenderers>
		
		<mx:series>
			<mx:LineSeries yField="ropewayForce" xField="ropewayTime"/>
		</mx:series>
	</mx:LineChart>		
		
	<s:Label right="15" id="lbMax" text="昨日最大抱索力&#xd;{_ropeway.yesterdayMax} {_ropeway.lastRopewayForce.ropewayUnit}" textAlign="center"
			 verticalAlign="middle"/> 	
	<s:Label right="15" id="lbMin" text="昨日最小抱索力&#xd;{_ropeway.yesterdayMin} {_ropeway.lastRopewayForce.ropewayUnit}" textAlign="center"
			 verticalAlign="middle"/> 	
	<s:Label right="15" id="lbAve" text="昨日平均抱索力&#xd;{_ropeway.yesterdayAve.toFixed()} {_ropeway.lastRopewayForce.ropewayUnit}" textAlign="center"
			 verticalAlign="middle"/> 
	
	<s:Group id="groupChart" left="59" right="52" bottom="47" top="50">
		<!--<s:Rect left="0" right="0" bottom="0" top="0">
			<s:stroke>
				<s:SolidColorStroke color="red"/>
			</s:stroke>
		</s:Rect>-->
		<s:Rect id="lineMax" height="1" left="10" right="10" visible="false">
			<s:fill>
				<s:BitmapFill source="@Embed('assets/image/yes_stroke.png')" fillMode="repeat"/>
			</s:fill>
		</s:Rect>
		<s:Rect id="lineAve" height="1" left="10" right="10" visible="false">
			<s:fill>
				<s:BitmapFill source="@Embed('assets/image/yes_stroke.png')" fillMode="repeat"/>
			</s:fill>
		</s:Rect>
		<s:Rect id="lineMin" height="1" left="10" right="10" visible="false">
			<s:fill>
				<s:BitmapFill source="@Embed('assets/image/yes_stroke.png')" fillMode="repeat"/>
			</s:fill>
		</s:Rect>
		<!--<s:Line id="lineMax" stroke="{yesStroke}" left="10" right="10" visible="false"/>
		<s:Line id="lineAve" stroke="{yesStroke}" left="10" right="10" visible="false"/>
		<s:Line id="lineMin" stroke="{yesStroke}" left="10" right="10" visible="false"/>-->
		<s:Group id="groupLine" width="100%" height="100%"/>
		<s:Group id="groupPoint" width="100%" height="100%"/>
		<s:Group id="groupLabel" width="100%" height="100%">
			<components:ChartTip id="chartTip" visible="false"/>
		</s:Group>
		
		<s:Image id="imageAnimate" width="100%" height="100%" visible="false" includeInLayout="false"/>
	</s:Group>
	
	<s:Label left="10" top="20" text="抱索力（{_ropeway.lastRopewayForce.ropewayUnit}）"/>
	<s:Label right="15" bottom="40" text="时间"/>
	<s:Label y="10" fontSize="24" fontWeight="bold" horizontalCenter="0" color="0x1b5aa2"
			 text="{_ropeway.ropewayId}抱索力实时监控曲线"/>
</s:SkinnableContainer>
